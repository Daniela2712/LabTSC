# 0
# vsim +notimingchecks +nowarnTSCALE +NUMBEROFTRANSACTION=2 -sva -nocoverage -quiet -sv_seed 7774347 -novopt top 
# //  ModelSim SE 6.6d Nov  1 2010 
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_class.svh(105): Clocking block output lab2_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_class.svh(106): Clocking block output lab2_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_class.svh(107): Clocking block output lab2_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_class.svh(104): Clocking block output lab2_if.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_class.svh(111): Clocking block output lab2_if.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
#  First display
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   lab2_if.cb.opcode = 4 (SUB)
#   lab2_if.cb.operand_a = 14
#   lab2_if.cb.operand_b = 10
# 
# Writing to register location 1: 
#   lab2_if.cb.opcode = 1 (PASSA)
#   lab2_if.cb.operand_a = 1
#   lab2_if.cb.operand_b = 12
# 
# 
# Reading back the same register locations written...
# Read from register location 2: 
#   lab2_if.cb.opcode = 0 (ZERO)
#   lab2_if.cb.operand_a = 0
#   lab2_if.cb.operand_b = 0
# 
#   result    = 0
# 
# Read from register location 1: 
#   lab2_if.cb.opcode = 1 (PASSA)
#   lab2_if.cb.operand_a = 1
#   lab2_if.cb.operand_b = 12
# 
#   result    = 1
# 
# Read from register location 0: 
#   lab2_if.cb.opcode = 4 (SUB)
#   lab2_if.cb.operand_a = 14
#   lab2_if.cb.operand_b = 10
# 
#   result    = 4
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# TEST PASSED
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_class.svh(85)
#    Time: 70 ns  Iteration: 2  Instance: /top/test
